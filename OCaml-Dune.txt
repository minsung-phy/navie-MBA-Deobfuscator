## OCaml Dune

### 1. OCaml Dune이 무엇인가?

OCaml Dune: OCaml 프로젝트를 위한 자동 빌드 시스템. 

이는 프로젝트의 빌드 과정을 단순화하고 표준화하여, 개발자가 OCaml 프로젝트를 더 쉽고 효율적으로 관리할 수 있게 도와준다. Dune은 예전에는 Jbuilder로 알려져 있었으며, 강력한 빌드 규칙과 의존성 관리 기능을 제공한다.

### 2. OCaml Dune의 특징

1. 간결성: Dune은 프로젝트의 구성을 간단하게 만들어, 작은 프로젝트에서도 쉽게 사용할 수 있다.
(즉, Dune이 복잡한 설정이나 구성 과정 없이도 OCaml로 된 프로그램을 쉽게 빌드하고 실행할 수 있도록 도와준다. 작은 규모의 프로젝트에 Dune을 사용한다면 프로젝트의 초기 설정에 드는 시간과 노력을 크게 줄일 수 있다. 이는 더 복잡한 프로젝트 관리 작업이나 프로그램 개발에 더 많은 시간을 할애할 수 있게 해준다.)
2. 효율성: Dune은 빠른 빌드 시간을 제공하며, 변경된 부분만 재빌드하는 증분 빌드를 지원한다.
3. 호환성: 다양한 OCaml 컴파일러 버전을 지원하며, 다른 라이브러리와도 잘 작동한다.
4. 자동화: Dune은 의존성을 자동으로 관리하고, 필요한 경우 해당 의존성을 다운로드한다.

### 3. OCaml Dune 사용법

1. 설치 : OCaml의 패키지 관리 시스템인 OPAM을 통해 Dune을 설치 할 수 있다.

```bash
opam install dune
```

1. 프로젝트 초기화 : 새 프로젝트를 시작할 때는 dune init proj 명령어를 사용하여 기본 구조를 생성할 수 있다.

```bash
dune init proj test
cd my_project
```

1. dune 파일 작성 : 프로젝트의 루트에 dune 파일을 작성하여 프로젝트의 구성을 정의한다. 이 파일에서는 빌드할 라이브러리나 실행 파일, 의존성 등을 지정한다.
2. 빌드 : 프로젝트 디렉토리에서 다음 명령어를 실행하여 프로젝트를 빌드할 수 있다.

```bash
dune build
```

1. 실행 : 빌드된 실행 파일은 _build/default/ 디렉토리 아래에 위치한다. Dune을 사용하여 직접 실행할 수도 있다.

```bash
dune exec ./hello
```

### 4. 예제 - Hello.ml

간단한 예제로, Hello world를 출력하는 OCaml 프로그램을 Dune을 사용하여 빌드해보겠다. 

1. 프로젝트 디렉토리 설정 
    - 프로젝트를 위한 새 디렉토리를 만들고, 그 안으로 이동한다.
    
    ```bash
    mkdir test
    cd test
    ```
    
2. Dune 프로젝트 초기화
    - Dune을 사용해 프로젝트를 초기화한다. 이 예제에서는 프로젝트 이름을 test로 한다.
    
    ```bash
    dune init proj test
    ```
    
3. 실행 파일 설정
    - 이 디렉토리 내(프로젝트 디렉토리)에서, dune 파일 (확장자 없는 파일)을 만들고 다음과 같이 내용을 입력한다. 이 예제에서는 실행 파일의 이름을 hello로 한다.
    
    ```lisp
    (executable
      (name hello))
    ```
    
    - 소스 코드 파일 hello.ml을 생성하고, OCaml 코드를 작성한다.
    
    ```ocaml
    print_endline "Hello, World!";
    ```
    
4. 프로젝트 빌드
    - 프로젝트 디렉토리에서 다음 명령어로 프로젝트를 빌드한다.
    
    ```bash
    dune build
    ```
    
    이 명령어는 dune 파일의 설정에 따라 필요한 빌드 작업을 자동으로 수행한다.
    
5. 프로그램 실행
    - 다음 명령어로 빌드된 프로그램을 실행할 수 있다.
    
    ```bash
    dune exec ./hello.exe
    ```
    
    hello.exe는 빌드된 실행 파일이다.
    

### 5. dune 파일의 내용

```lisp
(executable
  (name hello))
```

- 위 내용은 Dune 빌드 시스템을 사용하여 OCaml 프로젝트를 구성하기 위한 설정이다. 이 예시에서는 하나의 실행 가능 파일을 정의하고 있으며, 그 파일의 이름은 hello로 지정된다.
- (executable (name hello))의 의미
    - executable : 이 키워드는 해당 설정이 실행 가능한 프로그램을 빌드하기 위한 것임을 Dune에 알린다. 즉, 이 설정은 컴파일된 코드가 최종적으로 실행 파일 형태로 만들어질 것임을 나타낸다.
    - (name hello) : 이 부분은 생성될 실행 파일의 이름을 hello로 지정한다. 이는 프로젝트 내에서 해당 실행 파일을 식별하는 데 사용한다.

### 6. 몇 가지 dune 파일 예제

1. 라이브러리 정의하기
    
    라이브러리는 C언어의 stdio.h와 같은 것이다.
    
    라이브러리를 정의하는 경우, dune 파일은 다음과 같이 작성될 수 있다.
    
    ```lisp
    (library
    	(name my_library)
    	(public_name my-library))
    ```
    
    - library : 라이브러리를 정의하는 키워드
    - (name my_library) : 내부적으로 사용될 라이브러리의 이름
    - (public_name my-library) : 외부에서 참조할 때 사용될 라이브러리의 이름
2. 여러 소스 파일을 가진 실행 파일
    
    여러 소스 파일 (file1.ml, file2.ml)에서 실행 파일을 생성하려는 경우 다음과 같이 작성할 수 있다.
    
    ```lisp
    (executable
    	(name my_executable)
    	(modules file1 file2))
    ```
    
    - modules : 이 실행 파일을 위해 컴파일 할 모듈(소스 파일)의 리스트이다. 모듈 이름을 지정하지 않으면, 현재 디렉토리의 모든 .ml 파일이 기본적으로 포함된다.
3. 의존성을 가진 실행 파일
    
    특정 라이브러리에 의존하는 실행 파일을 정의하려면 다음과 같이 작성할 수 있다.
    
    ```lisp
    (executable
    	(name my_executable)
    	(libraries lwt cohttp))
    ```
    
    - libraries : 이 실행 파일이 의존하는 라이브러리의 리스트이다. 이 예제에서는 lwt와 cohttp 라이브러리를 사용한다.
4. 테스트 세트 설정
    
    Dune을 사용하여 프로젝트의 테스트 세트를 정의할 수도 있다.
    
    ```lisp
    (test
    	(name my_test)
    	(libraries alcotest))
    ```
    
    - test : 테스트 실행 파일을 정의하는 키워드이다.
    - libraries : 테스트에서 사용될 라이브러리들이다. 여기서는 alcotest를 예로 들었다.
5. 여러 디렉토리를 포함하는 프로젝트
    
    dune-project 파일을 프로젝트의 루트 디렉토리에 생성하고, 각 하위 디렉토리에 별도의 dune 파일을 작성하여 프로젝트의 다양한 부분을 구성할 수 있다. 이를 통해 복잡한 프로젝트 구조도 관리할 수 있다.
